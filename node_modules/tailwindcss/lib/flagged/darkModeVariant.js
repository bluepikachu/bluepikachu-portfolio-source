"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _postcssSelectorParser = _interopRequireDefault(require("postcss-selector-parser"));

var _buildSelectorVariant = _interopRequireDefault(require("../util/buildSelectorVariant"));

var _defaultConfig = _interopRequireDefault(require("../../defaultConfig"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  dark: 'media',
  variants: {
    backgroundColor: [..._defaultConfig.default.variants.backgroundColor, 'dark'],
    gradientColorStops: [..._defaultConfig.default.variants.gradientColorStops, 'dark'],
    borderColor: [..._defaultConfig.default.variants.borderColor, 'dark'],
    divideColor: [..._defaultConfig.default.variants.divideColor, 'dark'],
    placeholderColor: [..._defaultConfig.default.variants.placeholderColor, 'dark'],
    textColor: [..._defaultConfig.default.variants.textColor, 'dark']
  },
  plugins: [function ({
    addVariant,
    config,
    postcss,
    prefix
  }) {
    addVariant('dark', ({
      container,
      separator,
      modifySelectors
    }) => {
      if (config('dark') === 'media') {
        const modified = modifySelectors(({
          selector
        }) => {
          return (0, _buildSelectorVariant.default)(selector, 'dark', separator, message => {
            throw container.error(message);
          });
        });
        const mediaQuery = postcss.atRule({
          name: 'media',
          params: '(prefers-color-scheme: dark)'
        });
        mediaQuery.append(modified);
        container.append(mediaQuery);
        return container;
      }

      if (config('dark') === 'class') {
        const parser = (0, _postcssSelectorParser.default)(selectors => {
          selectors.walkClasses(sel => {
            sel.value = `dark${separator}${sel.value}`;
            sel.parent.insertBefore(sel, (0, _postcssSelectorParser.default)().astSync(prefix('.dark ')));
          });
        });
        return modifySelectors(({
          selector
        }) => parser.processSync(selector));
      }

      throw new Error("The `dark` config option must be either 'media' or 'class'.");
    });
  }]
};
exports.default = _default;